1. Players :

Key : player_id

player_id -> batting_style
player_id -> bawling_style
player_id -> name
player_id -> nationality
player_id -> team_id
------------------------------------------------------------------------------------------------------------------------
2. Team :

Key : team_id

team_id -> tname
team_id -> caption_id
team_id -> home_ground
------------------------------------------------------------------------------------------------------------------------
3. Venue :

Key : venue_id

venue_id -> city
venue_id -> state
venue_id -> grd_name
------------------------------------------------------------------------------------------------------------------------


4. Match_details :

Key : match_id

match_id -> match_date
match_id -> toss_decision
match_id -> status
match_id -> team1
match_id -> team2
match_id -> toss_winner
match_id -> venue
match-id -> match_time
------------------------------------------------------------------------------------------------------------------------
5. Playing_11

Key : {match_id, player_id}

 {match_id, player_id} -> team_id
 {match_id, player_id} -> is_substitute
 {match_id, player_id} -> substituted_out
 -----------------------------------------------------------------------------------------------------------------------
6. Match_officials

Key : match_id

match_id -> on_fild1
match_id -> on_field2
match_id -> third_ump
------------------------------------------------------------------------------------------------------------------------

7. Partnership 

Key : partnership_id

prtnership_id -> player1
prtnership_id -> player2
prtnership_id -> match_id
prtnership_id -> runs
prtnership_id -> partnership_no
prtnership_id -> inning_no
------------------------------------------------------------------------------------------------------------------------
8. Per_ball_data

Key : ball_id

ball_id -> over_no
ball_id -> ball_no
ball_id -> of_match
ball_id -> inning
ball_id -> extras
ball_id -> wicket_no
ball_id -> total_score
ball_id -> runs_scored
ball_id -> on_strike
ball_id -> off_strike
ball_id -> bowled_by
ball_id -> ball_speed
ball_id -> boundary
ball_id -> type_of_extra
ball_id -> striker_batting_position


------------------------------------------------------------------------------------------------------------------------



9. Wickets

Key : wicket_id

wicket_id -> wicket_type
wicket_id -> player_got_out
wicket_id -> caught_by
wicket_id -> run_out_by
wicket_id -> on_ball
wicket_id -> stumped_by
------------------------------------------------------------------------------------------------------------------------


10. Final_result

Key : match_id

match_id ->  winner
match_id ->  loser
match_id ->  score_of_winner
match_id ->  score_of_loser
match_id ->  win_run_margin
match_id ->  win_wicket_margin
match_id ->  player_of__the_match
------------------------------------------------------------------------------------------------------------------------



11. Player_performance_in _a_match

Key : {in_match, player}

{in_match, player} -> runs
{in_match, player} -> balls_played
{in_match, player} -> wickets_taken
{in_match, player} -> overs_bowled
{in_match, player} -> runs_conceded
{in_match, player} -> fours
{in_match, player} -> sixes
{in_match, player} -> fours_conceded
{in_match, player} -> sixes_conceded
------------------------------------------------------------------------------------------------------------------------
12. Points_table

Key :  team_id

team_id -> matches_played
team_id -> lost
team_id -> won
team_id -> no_result
team_id -> points
team_id -> NRR
------------------------------------------------------------------------------------------------------------------------
13. Users

Key : user_id

user_id -> passward
user_id -> last_access
user_id -> date_of_sign_in
	









BCNF proofs : 

1. Players Relation

Given FDs:
player_id → {batting_style, bowling_style, name, nationality, team_Id}
	
Compute the Closure of Player_ID :
player_id+ = { player_id, batting_style, bowling_style, name, nationality, team_id }

Since player_id+ includes all attributes of the relation, player_id is a Key.

For all functional dependencies in this relation, the left side is player_id, which is a Key.
Hence, the Players relation satisfies BCNF.


2. Team Relation
	
Given FDs:
team_id → {tname, caption_id, home_ground}

Compute the Closure of team_id :
team_id+ = { team_id, tname, caption_id, home_ground }

Since team_id+ includes all attributes of the relation, team_id is a Key.

For all functional dependencies in this relation, the left side is team_id, which is a Key.
Hence, the Team relation satisfies BCNF.

	
3. Venue Relation

Given FDs:
venue_id → {city, state, grd_name}

Compute the Closure of Venue_id :
venue_id+ = { venue_id, city, state, grd_name }

Since venue_id+ includes all attributes of the relation, venue_id is a Key.

For all functional dependencies in this relation, the left side is venue_id, which is a Key.
Hence, the Venue relation satisfies BCNF.

	
4. Match_details Relation

Given FDs:
match_id → {match_date, toss_decision, status, team1, team2, toss_winner, venue, match_time}

Compute the Closure of Match_id :
match_id+ = { match_id, match_date, toss_decision, status, team1, team2, toss_winner, venue, match_time }

Since match_id+ includes all attributes of the relation, match_id is a Key.

For all functional dependencies in this relation, the left side is match_id, which is a Key.
Hence, the Match_details relation satisfies BCNF.

	
5. Playing_11 Relation

Given FDs:
	{ match_id, player_id } → team_id
	{ match_id, player_id } → is_substitute
	{ match_id, player_id } → substituted_out

Compute the Closure of { match_id, player_id } :
{ match_id, player_id }+ = { match_id, player_id, team_id, is_substitute, substituted_out }

Since { match_id, player_id }+ includes all attributes of the relation, { match_id, player_id } is a Key.

For all functional dependencies in this relation, the left side is { match_id, player_id }, which is a Key.
Hence, the Playing_11 relation satisfies BCNF.

	
6. Match_officials Relation

Given FDs:
match_id → {on_field1, on_field2, third_ump}

Compute the Closure of match_id :
match_id+ = { match_id, on_field1, on_field2, third_ump }

Since match_id+ includes all attributes of the relation, match_id is a Key.

For all functional dependencies in this relation, the left side is match_id, which is a Key.
Hence, the Match_officials relation satisfies BCNF.

	
7. Partnership Relation

Given FDs:
partnership_id → {player1, player2, match_id, runs, partnership_no, inning_no}

Compute the Closure of partnership_id :
partnership_id+ = { partnership_id, player1, player2, match_id, runs, partnership_no, inning_no }

Since partnership_id+ includes all attributes of the relation, partnership_id is a Key.

For all functional dependencies in this relation, the left side is partnership_id, which is a Key.
Hence, the Partnership relation satisfies BCNF.

	
8. Per_ball_data Relation
	
Given FDs:
ball_id → {over_no, ball_no, of_match, inning, extras, wicket_no, total_score, runs_scored, on_strike, off_strike, bowled_by, stricker_batting_position, type_of_extra, boundry}

Compute the Closure of ball_id :
ball_id+ = { ball_id, over_no, ball_no, of_match, inning, extras, wicket_no, total_score, runs_scored, on_strike, off_strike, bowled_by, stricker_batting_position, type_of_extra, boundry }

Since ball_id+ includes all attributes of the relation, ball_id is a Key.

For all functional dependencies in this relation, the left side is ball_id, which is a Key.
Hence, the Per_ball_data relation satisfies BCNF.

	
9. Wickets Relation

Given FDs:
wicket_id → {wicket_type, player_got_out, caught_by, run_out_by, on_ball, stumped_by}

Compute the Closure of Wicket_id :
wicket_id+ = { wicket_id, wicket_type, player_got_out, caught_by, run_out_by, on_ball, stumped_by }

Since wicket_id+ includes all attributes of the relation, wicket_id is a Key.

For all functional dependencies in this relation, the left side is wicket_id, which is a Key.
Hence, the Wickets relation satisfies BCNF.

	
10. Final_result Relation
	
Given FDs:
match_id → {winner, loser, score_of_winner, score_of_loser, win_run_margin, win_wicket_margin, player_of_the_match}

Compute the Closure of Match_id :
match_id+ = { match_id, winner, loser, score_of_winner, score_of_loser, win_run_margin, win_wicket_margin, player_of_the_match }

Since match_id+ includes all attributes of the relation, match_id is a Key.

For all functional dependencies in this relation, the left side is match_id, which is a Key.
Hence, the Final_result relation satisfies BCNF.

	
11. Player_performance_in_a_match Relation

Given FDs:
{ in_match, player } → {runs, balls_played, wickets_taken, overs_bowled, runs_conceded, fours, sixes, fours_conceded, sixes_conceded}

Compute the Closure of { in_match, player } :
{ in_match, player }+ = { in_match, player, runs, balls_played, wickets_taken, overs_bowled, runs_conceded, fours, sixes, fours_conceded, sixes_conceded }

Since { in_match, player }+ includes all attributes of the relation, { in_match, player } is a Key.

For all functional dependencies in this relation, the left side is { in_match, player }, which is a Key.
Hence, the Player_performance_in_a_match relation satisfies BCNF.

	
12. Points_table Relation
	
Given FDs:
team_id → {matches_played, losses, wins, no_result, points, NRR}

Compute the Closure of Team_id :
team_id+ = { team_id, matches_played, losses, wins, no_result, points, NRR }

Since team_id+ includes all attributes of the relation, team_id is a Key.

For all functional dependencies in this relation, the left side is team_id, which is a Key.
Hence, the Points_table relation satisfies BCNF.

	
13. Users Relation

Given FDs:
user_id → {password, last_access, date_of_sign_in}

Compute the Closure of User_id :
user_id+ = { user_id, password, last_access, date_of_sign_in }

Since user_id+ includes all attributes of the relation, user_id is a Key.

For all functional dependencies in this relation, the left side is user_id, which is a Key.
Hence, the User relation satisfies BCNF.


Hance, All relations are in Boyes Code Normal Form.  
